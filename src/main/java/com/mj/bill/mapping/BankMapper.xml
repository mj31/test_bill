<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.mj.bill.dao.IBankDao">

	<resultMap id="RM_BankAccount" type="com.mj.bill.pojo.Bank">
        <result property="id" column="id"/>
        <result property="serialNumber" column="serial_number"/>
        <result property="exchangeDate" column="exchange_date"/>
        <result property="exchangeMoney" column="exchange_money"/>
        <result property="hisAccount" column="his_account"/>
        <result property="hisAccountName" column="his_account_name"/>
        <result property="hisAccountId" column="his_account_id"/>
        <result property="exchangeFlag" column="exchange_flag"/>
        <result property="serviceType" column="service_type"/>
        <result property="remark" column="remark"/>
        <result property="status" column="status"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createDate" column="create_date"/>
        <result property="createUserName" column="create_user_name"/>
        <result property="updateUserId" column="update_user_id"/>
        <result property="updateUserName" column="update_user_name"/>
        <result property="updateDate" column="update_date"/>
        <result property="operateId" column="operate_id"/>
        
	</resultMap>
	
	<resultMap id="RM_BankAccountVo" type="com.mj.bill.pojo.BankVo">
        <result property="id" column="id"/>
        <result property="serialNumber" column="serial_number"/>
        <result property="exchangeDate" column="exchange_date"/>
        <result property="exchangeMoney" column="exchange_money"/>
        <result property="hisAccount" column="his_account"/>
        <result property="hisAccountName" column="his_account_name"/>
        <result property="hisAccountId" column="his_account_id"/>
        <result property="exchangeFlag" column="exchange_flag"/>
        <result property="serviceType" column="service_type"/>
        <result property="remark" column="remark"/>
        <result property="status" column="status"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createDate" column="create_date"/>
        <result property="createUserName" column="create_user_name"/>
        <result property="updateUserId" column="update_user_id"/>
        <result property="updateUserName" column="update_user_name"/>
        <result property="updateDate" column="update_date"/>
        <result property="strExchangeDate" column="strExchangeDate"/>
        <result property="operateId" column="operate_id"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,operate_id,serial_number,exchange_date,exchange_money,his_account,his_account_name,his_account_id,exchange_flag,service_type,remark,status,create_user_id,create_date,create_user_name,update_user_id,update_user_name,update_date
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO bank_account (
        	id ,
        	serial_number ,
        	exchange_date ,
        	exchange_money ,
        	his_account ,
        	his_account_name ,
        	his_account_id ,
        	exchange_flag ,
        	service_type ,
        	remark ,
        	status ,
        	create_user_id ,
        	create_date ,
        	create_user_name ,
        	update_user_id ,
        	update_user_name ,
        	update_date ,
        	operate_id
        ) VALUES (
        	#{id} ,
        	#{serialNumber} ,
        	#{exchangeDate} ,
        	#{exchangeMoney} ,
        	#{hisAccount} ,
        	#{hisAccountName} ,
        	#{hisAccountId} ,
        	#{exchangeFlag} ,
        	#{serviceType} ,
        	#{remark} ,
        	#{status} ,
        	#{createUserId} ,
        	#{createDate} ,
        	#{createUserName} ,
        	#{updateUserId} ,
        	#{updateUserName} ,
        	#{updateDate} ,
        	#{operateId}
        	
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
	
	
     <sql id="update_sql">
         <set>
                <if test="serialNumber != null">
	         	serial_number = #{serialNumber} ,
	         </if>
                <if test="exchangeDate != null">
	         	exchange_date = #{exchangeDate} ,
	         </if>
	         <if test="operateId != null">
	         	operate_id = #{operateId} ,
	         </if>
	         
	         
                <if test="exchangeMoney != null">
	         	exchange_money = #{exchangeMoney} ,
	         </if>
                <if test="hisAccount != null">
	         	his_account = #{hisAccount} ,
	         </if>
                <if test="hisAccountName != null and hisAccountName != ''">
	         	his_account_name = #{hisAccountName} ,
	         </if>
                <if test="hisAccountId != null">
	         	his_account_id = #{hisAccountId} ,
	         </if>
                <if test="exchangeFlag != null">
	         	exchange_flag = #{exchangeFlag} ,
	         </if>
                <if test="serviceType != null and serviceType != ''">
	         	service_type = #{serviceType} ,
	         </if>
                <if test="remark != null and remark != ''">
	         	remark = #{remark} ,
	         </if>
                <if test="status != null">
	         	status = #{status} ,
	         </if>
                <if test="createUserId != null">
	         	create_user_id = #{createUserId} ,
	         </if>
                <if test="createDate != null">
	         	create_date = #{createDate} ,
	         </if>
                <if test="createUserName != null and createUserName != ''">
	         	create_user_name = #{createUserName} ,
	         </if>
                <if test="updateUserId != null">
	         	update_user_id = #{updateUserId} ,
	         </if>
                <if test="updateUserName != null and updateUserName != ''">
	         	update_user_name = #{updateUserName} ,
	         </if>
                <if test="updateDate != null">
	         	update_date = #{updateDate} 
	         </if>
       </set>
    </sql>
    
	<update id="update" >
	        UPDATE  bank_account
	    <include refid="update_sql" />
	        WHERE 
	                id = #{id} 
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM bank_account WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="RM_BankAccountVo">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM bank_account 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
               <if test="id != null">
		             AND id = #{id}
	           </if>
	           <if test="operateId != null">
	         		AND operate_id = #{operateId} 
	         </if>
               <if test="serialNumber != null">
		             AND serial_number = #{serialNumber}
	           </if>
               <if test="exchangeDate != null">
		             AND exchange_date = #{exchangeDate}
	           </if>
               <if test="exchangeMoney != null">
		             AND exchange_money = #{exchangeMoney}
	           </if>
               <if test="hisAccount != null">
		             AND his_account = #{hisAccount}
	           </if>
                <if test="hisAccountName != null and hisAccountName !=''">
		             AND his_account_name like concat(concat('%',#{hisAccountName}),'%') 
	            </if>
               <if test="hisAccountId != null">
		             AND his_account_id = #{hisAccountId}
	           </if>
               <if test="exchangeFlag != null">
		             AND exchange_flag = #{exchangeFlag}
	           </if>
                <if test="serviceType != null and serviceType !=''">
		             AND service_type = #{serviceType}
	            </if>
                <if test="remark != null and remark !=''">
		             AND remark = #{remark}
	            </if>
               <if test="status != null">
		             AND status = #{status}
	           </if>
               <if test="createUserId != null">
		             AND create_user_id = #{createUserId}
	           </if>
               <if test="createDate != null">
		             AND create_date = #{createDate}
	           </if>
                <if test="createUserName != null and createUserName !=''">
		             AND create_user_name = #{createUserName}
	            </if>
               <if test="updateUserId != null">
		             AND update_user_id = #{updateUserId}
	           </if>
                <if test="updateUserName != null and updateUserName !=''">
		             AND update_user_name = #{updateUserName}
	            </if>
               <if test="updateDate != null">
		             AND update_date = #{updateDate}
	           </if>
		</where>
	</sql>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM bank_account 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="RM_BankAccount">
    	SELECT <include refid="columns" />
	    FROM bank_account 
		<include refid="findPage_where"/>
		
		<if test="sortColumns != null and sortColumns !=''">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
     <select id="queryBankByCondition" resultMap="RM_BankAccountVo">
    	SELECT <include refid="columns" />
	    FROM bank_account 
	    <include refid="findPage_where"/>
	    order by exchange_date desc 
     </select>
     
     <select id="queryBankByConditionTotal" resultType="int">
    	SELECT count(1)
	    FROM bank_account 
	    <include refid="findPage_where"/>
     </select>
     
     <select id="getByOperateId" resultMap="RM_BankAccountVo">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM bank_account 
	        WHERE 
		        operate_id = #{operateId} 
	    ]]>
	</select>
	
	
	<update id="deleteById" >
	        UPDATE  bank_account set status = 1  WHERE id = #{id} 
	  </update>
</mapper>

